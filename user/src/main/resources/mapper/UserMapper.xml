<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xmu.ringoer.myzone.user.mapper.UserMapper">

    <select id="selectUserCount" resultType="Integer">
        select count(*)
        from `user`;
    </select>

    <select id="selectUserByUsername" parameterType="String" resultType="User">
        select id,
            username,
            password,
            role_id,
            nickname,
            avatar,
            signature,
            email,
            gender,
            birthday,
            gmt_create,
            gmt_modified,
            is_deleted as beDeleted
        from `user` where `is_deleted` = 0 and`username` = #{username};
    </select>

    <select id="selectUserById" parameterType="Integer" resultType="User">
        select id,
            username,
            password,
            role_id,
            nickname,
            avatar,
            signature,
            email,
            gender,
            birthday,
            gmt_create,
            gmt_modified,
            is_deleted as beDeleted
        from `user` where `is_deleted` = 0 and `id` = #{id};
    </select>

    <select id="selectUserByEmail" parameterType="String" resultType="User">
        select id,
            username,
            password,
            role_id,
            nickname,
            avatar,
            signature,
            email,
            gender,
            birthday,
            gmt_create,
            gmt_modified,
            is_deleted as beDeleted
        from `user` where `is_deleted` = 0 and `email` = #{email};
    </select>

    <select id="selectDisabledUserByEmail" parameterType="String" resultType="User">
        select id,
        username,
        password,
        role_id,
        nickname,
        avatar,
        signature,
        email,
        gender,
        birthday,
        gmt_create,
        gmt_modified,
        is_deleted as beDeleted
        from `user` where `is_deleted` = 1 and `email` = #{email};
    </select>

    <select id="selectAllUserByEmail" parameterType="String" resultType="User">
        select id,
        username,
        password,
        role_id,
        nickname,
        avatar,
        signature,
        email,
        gender,
        birthday,
        gmt_create,
        gmt_modified,
        is_deleted as beDeleted
        from `user` where `email` = #{email};
    </select>

    <select id="selectUsers" resultType="User">
        select id,
            username,
            password,
            role_id,
            nickname,
            avatar,
            signature,
            email,
            gender,
            birthday,
            gmt_create,
            gmt_modified,
            is_deleted as beDeleted
        from `user` where `is_deleted` = 0;
    </select>

    <insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        insert into `user`(
            username,
            password,
            role_id,
            nickname,
            avatar,
            signature,
            email,
            gender,
            birthday,
            gmt_create,
            gmt_modified,
            is_deleted)
        values (
            #{username},
            #{password},
            #{roleId},
            #{nickname},
            #{avatar},
            #{signature},
            #{email},
            #{gender},
            #{birthday},
            now(),
            now(),
            0);
    </insert>

    <update id="updateUser" parameterType="User" >
        update `user`
        set nickname = #{nickname},
            avatar = #{avatar},
            signature = #{signature},
            gender = #{gender},
            birthday = #{birthday},
            gmt_modified = now()
        where `is_deleted` = 0 and id = #{id};
    </update>

    <update id="updateUserPassword" parameterType="User" >
        update `user`
        set password = #{password},
            gmt_modified = now()
        where `is_deleted` = 0 and id = #{id};
    </update>

    <update id="updateUserEmail" parameterType="User" >
        update `user`
        set email = #{email},
            gmt_modified = now()
        where `is_deleted` = 0 and id = #{id};
    </update>

    <update id="enableUser" parameterType="User" >
        update `user`
        set is_deleted = 0,
            gmt_modified = now()
        where id = #{id};
    </update>

    <update id="disableUser" parameterType="User" >
        update `user`
        set is_deleted = 1,
            gmt_modified = now()
        where id = #{id};
    </update>

</mapper>